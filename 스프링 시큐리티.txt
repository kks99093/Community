	1. 의존성 추가
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-web</artifactId>
	<version>4.2.19.RELEASE</version>
</dependency>
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-config</artifactId>
	<version>4.2.19.RELEASE</version>
</dependency>
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-core</artifactId>
	<version>4.2.19.RELEASE</version>
</dependency>
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-taglibs</artifactId>
	<version>4.2.19.RELEASE</version>
</dependency>


	2. security-context.xml 생성 + 설정
1)WEB-INF > spring에다가 생성함 (Spring Bean Configuration File)
2)Namespaces에서 security 추가


	3. web.xml 설정
1) filter를 이용해 스프링 시큐리티가 스프링 동작에 관여하도록 설정
<filter>
	<filter-name>springSecurityFilterChain</filter-name>
	<filter-class>org.springframework.web.filter.DelegatingFilterProxy
	</filter-class>
</filter>
<filter-mapping>
	<filter-name>springSecurityFilterChain</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>

2)springSecurityFilterChain Bean설정파일(2에서 만든security-context.xml)을 찾을수있게 처리해
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>/WEB-INF/spring/root-context.xml
		/WEB-INF/spring/security-context.xml</param-value>
</context-param>

	4.Controller 설정
@GetMapping("(jsp파일이름)")적어서 매핑을해준다

	5.로그인 성공후 특정동작(특정페이지로 이동)
1. CustomLoginSuccessHandler 클래스 생성 AuthenticationSuccessHandler를 implements해준다
2.@Override
public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication auth)
throws IOException, ServletException {
}를 오버라딩해서 사용함
